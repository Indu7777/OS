#include <stdio.h> #include <string.h>

int gcd(int a, int b) { if (b == 0) return a; return gcd(b, a % b); }

int lcm(int a, int b) { return (a * b) / gcd(a, b); }

int hyperperiod(int period[], int n) { int k = period[0]; for (int i = 1; i < n; i++) { k = lcm(k, period[i]); } return k; }

int edf(int period[], int n, int t, int deadline[]) { int small = 10000, smallindex = -1; for (int i = 0; i < n; i++) { if (period[i] - t <= deadline[i] && period[i] < small) { small = period[i]; smallindex = i; } } return smallindex; }

int main() { int i, n, k, time = 0, task, preemption_count = 0; int exec[20], period[20], deadline[20], instance[20] = {0}, ex[100], responsemax[20], responsemin[20]; float util = 0;

printf("\nEarliest Deadline First Algorithm\n");
FILE *read = fopen("Sampledata.txt", "r");
if (!read) {
    printf("Error opening file!\n");
    return 1;
}

fscanf(read, "%d", &n);
for (i = 0; i < n; i++) {
    fscanf(read, "%d %d %d", &period[i], &exec[i], &deadline[i]);
    util += (float)exec[i] / period[i];
    responsemax[i] = exec[i];
    responsemin[i] = exec[i];
}
fclose(read);

util *= 100;
if (util > 100) {
    printf("\nUtilization factor = %.2f\nScheduling not possible as utilization exceeds 100\n", util);
    return 0;
}

printf("\nUtilization factor = %.2f\nScheduling is possible\n", util);
printf("\nHyperperiod: %d\n\n", k = hyperperiod(period, n));

while (time < k) {
    task = edf(period, n, time, deadline);
    if (task == -1) {
        printf("- ");
    } else {
        printf("T%d ", task);
        instance[task]++;
        ex[time] = task;
        if (instance[task] == exec[task]) {
            responsemax[task] = time + 1;
            responsemin[task] = exec[task];
            period[task] += deadline[task];
            instance[task] = 0;
        }
    }
    time++;
}

for (i = 0; i < n; i++) {
    printf("\nMaximum Response Time of Task %d = %d", i, responsemax[i]);
    printf("\nMinimum Response Time of Task %d = %d\n", i, responsemin[i]);
}

for (i = 0; i < k; i++) {
    if (i > 0 && ex[i] != ex[i - 1]) {
        preemption_count++;
    }
}
printf("\nPreemption Count = %d\n", preemption_count);

return 0;

}
