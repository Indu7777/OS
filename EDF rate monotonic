#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>
#include <math.h>

#define MAX_PROCESS 10

int execution_time[MAX_PROCESS], period_or_deadline[MAX_PROCESS], remain_time[MAX_PROCESS];
int num_of_processes;

void get_process_info(bool is_deadline_based) {
    printf("Enter the number of processes (max %d): ", MAX_PROCESS);
    scanf("%d", &num_of_processes);
    if (num_of_processes < 1 || num_of_processes > MAX_PROCESS) {
        printf("Invalid number of processes. Exiting.\n");
        exit(0);
    }
    for (int i = 0;i < num_of_processes; i++) {
        printf("\nProcess %d:\n", i + 1);
        printf("Execution time: ");
        scanf("%d", &execution_time[i]);
        remain_time[i] = execution_time[i];
        if (is_deadline_based) {
            printf("Deadline: ");
        } else {
            printf("Period: ");
        }
        scanf("%d", &period_or_deadline[i]);
    }
}

int get_observation_time() {
    int max_time = period_or_deadline[0];
    for (int i = 1; i < num_of_processes; i++) {
        if (period_or_deadline[i] > max_time) {
            max_time = period_or_deadline[i];
        }
    }
    return max_time;
}
void print_schedule(int process_list[], int cycles) {
    printf("\nScheduling:\n\n");
    printf("Time: ");
    for (int i=0;i<cycles;i++)
    {
        printf("| %02d ",i);
    }
    printf("|\n");
    for(int i=0;i<num_of_processes; i++) {
        printf("P[%d]: ", i + 1);
        for (int j = 0; j < cycles; j++) {
            if (process_list[j] == i + 1) {
                printf("|####");
            } else {
                printf("|    ");
            }
        }
        printf("|\n");
    }
}
void rate_monotonic(int time){
    int process_list[time];
    float utilization=0;
    for(int i=0;i<num_of_processes;i++){
        utilization+=(float)execution_time[i] / period_or_deadline[i];
    }
    float utilization_bound = num_of_processes * (pow(2, 1.0 / num_of_processes) - 1);

    if (utilization > utilization_bound) {
        printf("\nThe task set is not schedulable under Rate Monotonic Scheduling.\n");
        return;
    }

    for (int t = 0; t< time; t++) {
        int next_process=-1;
        int min_period=9999;

        for (int i = 0; i < num_of_processes; i++) {
            if (remain_time[i] > 0 && period_or_deadline[i] < min_period) {
                min_period = period_or_deadline[i];
                next_process = i;
            }
        }

        if (next_process != -1) {
            process_list[t] = next_process + 1;
            remain_time[next_process]--;
        } else {
            process_list[t] = 0;
        }

        for (int i = 0; i < num_of_processes; i++) {
            if ((t + 1) % period_or_deadline[i] == 0) {
                remain_time[i] = execution_time[i];
            }
        }
    }

    print_schedule(process_list, time);
}

void earliest_deadline_first(int time) {
    int process_list[time];

    for (int t = 0; t < time; t++) {
        int next_process = -1;
        int min_deadline = 9999;

        for (int i = 0; i < num_of_processes; i++) {
            if (remain_time[i] > 0 && period_or_deadline[i] < min_deadline) {
                min_deadline = period_or_deadline[i];
                next_process = i;
            }
        }

        if (next_process != -1) {
            process_list[t] = next_process + 1;
            remain_time[next_process]--;
        } else {
            process_list[t] = 0;
        }

        for (int i = 0; i < num_of_processes; i++) {
            if (remain_time[i] == 0) {
                remain_time[i] = execution_time[i];
                period_or_deadline[i] += execution_time[i];
            }
        }
    }

    print_schedule(process_list, time);
}

int main() {
    int option;

    while (1) {
        printf("\n1. Rate Monotonic\n2. Earliest Deadline First\n3. Exit\n\nEnter your choice: ");
        scanf("%d", &option);

        switch (option) {
            case 1:
                get_process_info(false);
                rate_monotonic(get_observation_time());
                break;

            case 2:
                get_process_info(true);
                earliest_deadline_first(get_observation_time());
                break;

            case 3:
                exit(0);

            default:
                printf("Invalid choice. Try again.\n");
        }
    }

    return 0;
}
