#include <stdio.h>
#include <pthread.h>
#include <semaphore.h>
#include <unistd.h>

#define N 5

sem_t mutex;
sem_t forks[N];
int hungry_philosophers[N] = {0};
int num_hungry = 0;
int total_philosophers;
int eating_count = 0; // Track how many are currently eating

void* philosopher_one_at_a_time(void* num) {
    int i = *(int*)num;

    if (!hungry_philosophers[i]) {
        return NULL;
    }

    printf("P %d is waiting\n", i+1);

    sem_wait(&mutex);
    printf("P %d is granted to eat\n", i+1);
    sem_post(&mutex);

    sleep(1); // Simulate eating

    sem_wait(&mutex);
    printf("P %d has finished eating\n", i+1);
    sem_post(&mutex);

    return NULL;
}

void* philosopher_two_at_a_time(void* num) {
    int i = *(int*)num;
    int left = i;
    int right = (i + 1) % total_philosophers;

    if (!hungry_philosophers[i]) {
        return NULL;
    }

    printf("P %d is waiting\n", i+1);

    // Try to pick up forks
    sem_wait(&mutex);
    while (eating_count >= 2 ||
           forks[left] == 0 ||
           forks[right] == 0) {
        sem_post(&mutex);
        usleep(100000); // Sleep briefly to avoid busy waiting
        sem_wait(&mutex);
    }

    forks[left] = 0;
    forks[right] = 0;
    eating_count++;
    printf("P %d is granted to eat\n", i+1);
    sem_post(&mutex);

    sleep(1); // Simulate eating

    sem_wait(&mutex);
    forks[left] = 1;
    forks[right] = 1;
    eating_count--;
    printf("P %d has finished eating\n", i+1);
    sem_post(&mutex);

    return NULL;
}

int main() {
    int choice;

    printf("Enter the total number of philosophers: ");
    scanf("%d", &total_philosophers);

    printf("How many are hungry: ");
    scanf("%d", &num_hungry);

    for (int i = 0; i < num_hungry; i++) {
        int pos;
        printf("Enter philosopher %d position (1 to %d): ", i+1, total_philosophers);
        scanf("%d", &pos);
        hungry_philosophers[pos-1] = 1;
    }

    sem_init(&mutex, 0, 1);
    for (int i = 0; i < total_philosophers; i++) {
        sem_init(&forks[i], 0, 1); // Initialize all forks as available
    }

    while (1) {
        printf("\n1. One can eat at a time\n");
        printf("2. Two can eat at a time\n");
        printf("3. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);

        if (choice == 3) break;

        pthread_t threads[total_philosophers];
        int ids[total_philosophers];

        for (int i = 0; i < total_philosophers; i++) {
            if (hungry_philosophers[i]) {
                ids[i] = i;
                if (choice == 1) {
                    pthread_create(&threads[i], NULL, philosopher_one_at_a_time, &ids[i]);
                } else if (choice == 2) {
                    pthread_create(&threads[i], NULL, philosopher_two_at_a_time, &ids[i]);
                }
            }
        }

        for (int i = 0; i < total_philosophers; i++) {
            if (hungry_philosophers[i]) {
                pthread_join(threads[i], NULL);
            }
        }
    }

    sem_destroy(&mutex);
    for (int i = 0; i < total_philosophers; i++) {
        sem_destroy(&forks[i]);
    }

    return 0;
}
